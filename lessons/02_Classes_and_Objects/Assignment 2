class Person:
    """Person represents a person in our system."""

     # This is the initializer, it gets run when we create a new object
    def __init__(self, name: str, age: int, last: str):
        """Initializes a new Person object."""
        self.name = name
        self.age = age
        self.last = last
    def say_hello(self, message: str):
        """Prints a greeting to the console."""
        print(f"Hello, my name is {self.name} and I am {self.age} years old. {message}")
        
        
class Parent(Person):
    """Parent represents a parent in our system."""

    def __init__(self, name: str, age: int,  last: str, spouse=None):
        """Initializes a new Parent object."""
        super().__init__(name, age, last) # Call Person.__init__ to initialize the name and age attributes
        self.children = []
        
        # Set our spouse but also set the spouse's spouse to us
        if spouse:
            self.spouse = spouse
            spouse.spouse = self
        
        self.spouse = None
        
    # def add_child(self, child: Person):
    #     """Adds a child to the parent's list of children."""
        

    def say_hello(self, message: str):
        """Prints a greeting to the console."""
        
        super().say_hello(message)
        if self.spouse:
            print(f"My spouse is {self.spouse.name}")
            
        print(f"I have {len(self.children)} children.")

        if len(self.children) > 0:
            print("Their names are:")
            for child in self.children:
                print(f"  {child.name} {child.age}")
                
                
class Child(Person):
    """Child represents a child in our system."""
    
    def __init__(self, name: str, age: int, parents: list, last: str):
        """Initializes a new Child object."""
        super().__init__(name, age, last)  # Call Person.__init__ to initialize the name and age attributes
        self.parents = parents
        for parent in parents:
            parent.children.append(self)
    def say_hello(self, message: str):
        """Prints a greeting to the console."""
        super().say_hello(message)
        print(f"My parents are {' and '.join([f"{parent.name} {parent.last}" for parent in self.parents])}")
        
        
# Now lets make a family
mom = Parent("Hyeseung", 49, "Ahn")
dad = Parent("Minsik", 50, "Ahn", mom)

jayden = Child("Jayden", 11, [mom, dad], "Ahn")
ella = Child("Ella", 14, [mom, dad], "Ahn")
def print_family(parent):
    print(parent.spouse.name)
    print(parent.name)
    for child in parent.children:
        print(child.name)
print_family(mom)
# Connect the children to the parents
# mom.add_child(jayden)
# mom.add_child(ella)
# dad.add_child(jayden)
# dad.add_child(ella)


mom.say_hello("Hello!") # Call the say_hello method of the mom object
print()
ella.say_hello("Hello!")
jayden.say_hello("Wassup!")